{"version":3,"sources":["app/components/Footer/Footer.jsx","app/components/ShoppingCart/ShoppingCart.jsx","app/contexts/NotificationContext.js","app/hooks/useNotification.js","app/components/NotificationBar/NotificationBar.jsx","app/components/MatxLayout/Layout1/Layout1Topbar.jsx","app/components/Brand/Brand.jsx","app/components/Sidenav/Sidenav.jsx","app/components/MatxLayout/Layout1/Layout1Sidenav.jsx","app/components/MatxTheme/SidenavTheme/SidenavTheme.jsx","app/components/MatxCustomizer/BadgeSelected.jsx","app/components/SecondarySidebar/SecondarySidebarToggle.jsx","app/components/MatxLayout/Layout1/Layout1.jsx","app/components/MatxCustomizer/MatxCustomizer.jsx","app/components/SecondarySidebar/SecondarySidebarContent.jsx"],"names":["AppFooter","styled","Toolbar","display","alignItems","minHeight","topBarHeight","width","padding","flexDirection","margin","FooterContent","maxWidth","Footer","theme","useTheme","settings","useSettings","footerTheme","themes","footer","ThemeProvider","AppBar","color","position","sx","zIndex","href","Button","variant","m","IconButton","palette","text","primary","disabled","height","sideNavWidth","paddingLeft","boxShadow","themeShadows","marginTop","marginBottom","marginLeft","fontWeight","transition","background","marginRight","textAlign","flexGrow","whiteSpace","overflow","textOverflow","ShoppingCart","reducer","state","action","type","notifications","payload","NotificationContext","createContext","deleteNotification","clearNotifications","getNotifications","createNotification","NotificationProvider","children","useReducer","dispatch","notificationID","a","axios","post","id","res","data","console","error","get","notification","useEffect","Provider","value","useNotification","useContext","Notification","NotificationCard","Box","opacity","secondary","fontSize","DeleteButton","right","CardLeftContent","justifyContent","Heading","NotificationBar","container","React","useState","panelOpen","setPanelOpen","handleDrawerToggle","textColor","onClick","Badge","badgeContent","length","Icon","activeTheme","Drawer","anchor","open","onClose","ModalProps","keepMounted","map","size","className","to","path","style","textDecoration","Card","mx","mb","elevation","icon","name","heading","getTimeDifference","Date","timestamp","px","pt","pb","title","subtitle","StyledIconButton","TopbarRoot","top","TopbarContainer","paddingRight","main","breakpoints","down","UserMenu","cursor","borderRadius","StyledItem","MenuItem","minWidth","Layout1Topbar","updateSettings","useAuth","logout","user","isMdScreen","useMediaQuery","mode","sidebarSettings","layout1Settings","leftSidebar","menuButton","Hidden","xsDown","Avatar","src","avatar","memo","BrandRoot","StyledSpan","Span","IMG","Brand","alt","StyledScrollBar","Scrollbar","SideNavMobile","left","bottom","up","Sidenav","options","suppressScrollX","items","navigations","activeLayoutSettingsName","activeLayout","activeLayoutSettings","updateSidebarMode","SidebarNavRoot","primaryBg","bgImgURL","backgroundRepeat","backgroundPosition","backgroundSize","backgroundImage","NavListBox","Layout1Sidenav","primaryRGB","convertHexToRGB","sidenavCompactWidth","SidenavTheme","sidenavTheme","BadgeSelected","Layout1Root","backgroundColor","dark","transform","letterSpacing","contrastText","paddingBottom","default","shadows","props","ContentBox","overflowY","overflowX","LayoutContainer","verticalAlign","secondarySidebar","Layout1","topbarTheme","topbar","sidenavMode","showSidenav","show","sidenavWidth","getSidenavWidth","ref","useRef","layoutClasses","current","sidebarMode","fixed","perfectScrollbar"],"mappings":"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","file":"static/js/26.6d7fc1d5.chunk.js","sourcesContent":["import React from 'react'\nimport { Span, Paragraph } from '../Typography'\nimport useSettings from 'app/hooks/useSettings'\nimport { Button, Toolbar, AppBar, ThemeProvider } from '@mui/material'\nimport { styled, useTheme } from '@mui/system'\nimport { topBarHeight } from 'app/utils/constant'\n\nconst AppFooter = styled(Toolbar)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n    minHeight: topBarHeight,\n    '@media (max-width: 499px)': {\n        display: 'table',\n        width: '100%',\n        minHeight: 'auto',\n        padding: '1rem 0',\n        '& .container': {\n            flexDirection: 'column !important',\n            '& a': {\n                margin: '0 0 16px !important',\n            },\n        },\n    },\n}))\n\nconst FooterContent = styled('div')(() => ({\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0px 1rem',\n    maxWidth: '1170px',\n    margin: '0 auto',\n}))\n\nconst Footer = () => {\n    const theme = useTheme()\n    const { settings } = useSettings()\n\n    const footerTheme = settings.themes[settings.footer.theme] || theme\n\n    return (\n        <ThemeProvider theme={footerTheme}>\n            <AppBar\n                color=\"primary\"\n                position=\"static\"\n                sx={{ zIndex: 96 }}\n            >\n                <AppFooter>\n                    <FooterContent>\n                        <a href=\"https://ui-lib.com/downloads/matx-pro-react-admin/\">\n                            <Button variant=\"contained\" color=\"secondary\">\n                                Get MatX Pro\n                            </Button>\n                        </a>\n                        <Span sx={{ m: \"auto\" }}></Span>\n                        <Paragraph sx={{ m: 0 }}>\n                            Design and Developed by{' '}\n                            <a href=\"http://ui-lib.com\">UI Lib</a>\n                        </Paragraph>\n                    </FooterContent>\n                </AppFooter>\n            </AppBar>\n        </ThemeProvider>\n    )\n}\n\nexport default Footer\n","import { useEffect } from 'react'\nimport useAuth from 'app/hooks/useAuth'\nimport { H6, Small } from '../Typography'\nimport { Box, styled, useTheme } from '@mui/system'\nimport { useNavigate } from 'react-router-dom'\nimport useSettings from 'app/hooks/useSettings'\nimport React, { Fragment, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { themeShadows } from '../MatxTheme/themeColors'\nimport { sideNavWidth, topBarHeight } from 'app/utils/constant'\nimport {\n    getCartList,\n    deleteProductFromCart,\n    updateCartAmount,\n} from 'app/redux/actions/EcommerceActions'\nimport {\n    Icon,\n    Badge,\n    IconButton,\n    Drawer,\n    Button,\n    ThemeProvider,\n} from '@mui/material'\n\nconst StyledIconButton = styled(IconButton)(({ theme }) => ({\n    '& span': {\n        color: theme.palette.text.primary,\n    },\n    '& #disable': {\n        color: theme.palette.text.disabled,\n    },\n}))\n\nconst MiniCart = styled('div')(({ theme }) => ({\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    width: sideNavWidth,\n}))\n\nconst CartBox = styled('div')(() => ({\n    padding: '4px',\n    paddingLeft: '16px',\n    display: 'flex',\n    alignItems: 'center',\n    boxShadow: themeShadows[6],\n    height: topBarHeight,\n    '& h5': {\n        marginTop: 0,\n        marginBottom: 0,\n        marginLeft: '16px',\n        fontWeight: '500',\n    },\n}))\n\nconst ProductBox = styled('div')(() => ({\n    display: 'flex',\n    alignItems: 'center',\n    padding: '8px 8px',\n    transition: 'background 300ms ease',\n    '&:hover': {\n        background: 'rgba(0,0,0,0.01)',\n    },\n}))\n\nconst IMG = styled('img')(() => ({\n    width: 48,\n}))\n\nconst ProductDetails = styled('div')(() => ({\n    marginRight: '8',\n    textAlign: 'center',\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    '& h6': {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        display: 'block',\n        width: 120,\n        marginBottom: '4px',\n    },\n}))\n\nlet cartListLoaded = false\n\nfunction ShoppingCart({ container }) {\n    const [totalCost, setTotalCost] = useState(0)\n    const [panelOpen, setPanelOpen] = useState(false)\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const { user } = useAuth()\n    const { cartList } = useSelector((state) => state.ecommerce)\n    const { settings } = useSettings()\n    const theme = useTheme()\n    const secondary = theme.palette.text.secondary\n\n    if (!cartListLoaded) {\n        dispatch(getCartList(user.id))\n        cartListLoaded = true\n    }\n\n    const handleDrawerToggle = () => {\n        setPanelOpen(!panelOpen)\n    }\n\n    const handleCheckoutClick = () => {\n        if (totalCost > 0) {\n            navigate('/ecommerce/checkout')\n            setPanelOpen(false)\n        }\n    }\n\n    useEffect(() => {\n        let total = 0\n\n        cartList.forEach((product) => {\n            total += product.price * product.amount\n        })\n        setTotalCost(total)\n    }, [cartList])\n\n    const { palette } = useTheme()\n    const textColor = palette.text.primary\n\n    return (\n        <Fragment>\n            <IconButton onClick={handleDrawerToggle}>\n                <Badge color=\"secondary\" badgeContent={cartList.length}>\n                    <Icon sx={{ color: textColor }}>shopping_cart</Icon>\n                </Badge>\n            </IconButton>\n\n            <ThemeProvider theme={settings.themes[settings.activeTheme]}>\n                <Drawer\n                    container={container}\n                    variant=\"temporary\"\n                    anchor={'right'}\n                    open={panelOpen}\n                    onClose={handleDrawerToggle}\n                    ModalProps={{\n                        keepMounted: true,\n                    }}\n                >\n                    <MiniCart>\n                        <CartBox>\n                            <Icon color=\"primary\">shopping_cart</Icon>\n                            <h5>Cart</h5>\n                        </CartBox>\n\n                        <Box flexGrow={1} overflow=\"auto\">\n                            {cartList.map((product) => (\n                                <ProductBox key={product.id}>\n                                    <Box\n                                        mr=\"4px\"\n                                        display=\"flex\"\n                                        flexDirection=\"column\"\n                                    >\n                                        <StyledIconButton\n                                            size=\"small\"\n                                            onClick={() =>\n                                                dispatch(\n                                                    updateCartAmount(\n                                                        user.id,\n                                                        product.id,\n                                                        product.amount + 1\n                                                    )\n                                                )\n                                            }\n                                        >\n                                            <Icon sx={{ cursor: 'pinter' }}>\n                                                keyboard_arrow_up\n                                            </Icon>\n                                        </StyledIconButton>\n                                        <StyledIconButton\n                                            disabled={!(product.amount - 1)}\n                                            size=\"small\"\n                                            onClick={() =>\n                                                dispatch(\n                                                    updateCartAmount(\n                                                        user.id,\n                                                        product.id,\n                                                        product.amount - 1\n                                                    )\n                                                )\n                                            }\n                                        >\n                                            <Icon id={!(product.amount - 1) && 'disable'}>\n                                                keyboard_arrow_down\n                                            </Icon>\n                                        </StyledIconButton>\n                                    </Box>\n                                    <Box mr={1}>\n                                        <IMG\n                                            src={product.imgUrl}\n                                            alt={product.title}\n                                        />\n                                    </Box>\n                                    <ProductDetails>\n                                        <H6>{product.title}</H6>\n                                        <Small sx={{ color: secondary }}>\n                                            ${product.price} x {product.amount}\n                                        </Small>\n                                    </ProductDetails>\n                                    <StyledIconButton\n                                        size=\"small\"\n                                        onClick={() =>\n                                            dispatch(\n                                                deleteProductFromCart(\n                                                    user.userId,\n                                                    product.id\n                                                )\n                                            )\n                                        }\n                                    >\n                                        <Icon fontSize=\"small\">clear</Icon>\n                                    </StyledIconButton>\n                                </ProductBox>\n                            ))}\n                        </Box>\n\n                        <Button\n                            sx={{ width: '100%', borderRadius: 0 }}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleCheckoutClick}\n                        >\n                            Checkout (${totalCost.toFixed(2)})\n                        </Button>\n                    </MiniCart>\n                </Drawer>\n            </ThemeProvider>\n        </Fragment>\n    )\n}\n\nexport default ShoppingCart\n","import React, { createContext, useEffect, useReducer } from 'react'\nimport axios from 'axios'\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'LOAD_NOTIFICATIONS': {\n            return {\n                ...state,\n                notifications: action.payload,\n            }\n        }\n        case 'DELETE_NOTIFICATION': {\n            return {\n                ...state,\n                notifications: action.payload,\n            }\n        }\n        case 'CLEAR_NOTIFICATIONS': {\n            return {\n                ...state,\n                notifications: action.payload,\n            }\n        }\n        default: {\n            return { ...state }\n        }\n    }\n}\n\nconst NotificationContext = createContext({\n    notifications: [],\n    deleteNotification: () => {},\n    clearNotifications: () => {},\n    getNotifications: () => {},\n    createNotification: () => {},\n})\n\nexport const NotificationProvider = ({ settings, children }) => {\n    const [state, dispatch] = useReducer(reducer, [])\n\n    const deleteNotification = async (notificationID) => {\n        try {\n            const res = await axios.post('/api/notification/delete', {\n                id: notificationID,\n            })\n            dispatch({\n                type: 'DELETE_NOTIFICATION',\n                payload: res.data,\n            })\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    const clearNotifications = async () => {\n        try {\n            const res = await axios.post('/api/notification/delete-all')\n            dispatch({\n                type: 'CLEAR_NOTIFICATIONS',\n                payload: res.data,\n            })\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    const getNotifications = async () => {\n        try {\n            const res = await axios.get('/api/notification')\n            dispatch({\n                type: 'LOAD_NOTIFICATIONS',\n                payload: res.data,\n            })\n        } catch (e) {\n            console.error(e)\n        }\n    }\n    const createNotification = async (notification) => {\n        try {\n            const res = await axios.post('/api/notification/add', {\n                notification,\n            })\n            dispatch({\n                type: 'CREATE_NOTIFICATION',\n                payload: res.data,\n            })\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    useEffect(() => {\n        getNotifications()\n    }, [])\n\n    return (\n        <NotificationContext.Provider\n            value={{\n                notifications: state.notifications,\n                deleteNotification,\n                clearNotifications,\n                getNotifications,\n                createNotification,\n            }}\n        >\n            {children}\n        </NotificationContext.Provider>\n    )\n}\n\nexport default NotificationContext\n","import { useContext } from 'react'\nimport NotificationContext from 'app/contexts/NotificationContext'\n\nconst useNotification = () => useContext(NotificationContext)\n\nexport default useNotification\n","import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Small, Paragraph } from '../Typography'\r\nimport { themeShadows } from '../MatxTheme/themeColors'\r\nimport { getTimeDifference } from 'app/utils/utils.js'\r\nimport useSettings from 'app/hooks/useSettings'\r\nimport useNotification from 'app/hooks/useNotification'\r\nimport { styled, Box, useTheme } from '@mui/system'\r\nimport {\r\n    Icon,\r\n    Badge,\r\n    Card,\r\n    Button,\r\n    IconButton,\r\n    Drawer,\r\n    ThemeProvider,\r\n} from '@mui/material'\r\nimport { sideNavWidth, topBarHeight } from 'app/utils/constant'\r\n\r\nconst Notification = styled('div')(() => ({\r\n    padding: '16px',\r\n    marginBottom: '16px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: topBarHeight,\r\n    boxShadow: themeShadows[6],\r\n    '& h5': {\r\n        marginLeft: '8px',\r\n        marginTop: 0,\r\n        marginBottom: 0,\r\n        fontWeight: '500',\r\n    },\r\n}))\r\n\r\nconst NotificationCard = styled(Box)(({ theme }) => ({\r\n    position: 'relative',\r\n    '&:hover': {\r\n        '& .messageTime': {\r\n            display: 'none',\r\n        },\r\n        '& .deleteButton': {\r\n            opacity: '1',\r\n        },\r\n    },\r\n    '& .messageTime': {\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    '& .icon': { fontSize: '1.25rem' },\r\n}))\r\n\r\nconst DeleteButton = styled(IconButton)(({ theme }) => ({\r\n    opacity: '0',\r\n    position: 'absolute',\r\n    right: 5,\r\n    marginTop: 9,\r\n    marginRight: '24px',\r\n    background: 'rgba(0, 0, 0, 0.01)',\r\n}))\r\n\r\nconst CardLeftContent = styled('div')(({ theme }) => ({\r\n    padding: '12px 8px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    background: 'rgba(0, 0, 0, 0.01)',\r\n    '& small': {\r\n        fontWeight: '500',\r\n        marginLeft: '16px',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}))\r\n\r\nconst Heading = styled('span')(({ theme }) => ({\r\n    fontWeight: '500',\r\n    marginLeft: '16px',\r\n    color: theme.palette.text.secondary,\r\n}))\r\n\r\nconst NotificationBar = ({ container }) => {\r\n    const { settings } = useSettings()\r\n    const theme = useTheme()\r\n    const secondary = theme.palette.text.secondary\r\n    const [panelOpen, setPanelOpen] = React.useState(false)\r\n    const { deleteNotification, clearNotifications, notifications } =\r\n        useNotification()\r\n\r\n    const handleDrawerToggle = () => {\r\n        setPanelOpen(!panelOpen)\r\n    }\r\n\r\n    const { palette } = useTheme()\r\n    const textColor = palette.text.primary\r\n\r\n    return (\r\n        <Fragment>\r\n            <IconButton onClick={handleDrawerToggle}>\r\n                <Badge color=\"secondary\" badgeContent={notifications?.length}>\r\n                    <Icon sx={{ color: textColor }}>notifications</Icon>\r\n                </Badge>\r\n            </IconButton>\r\n\r\n            <ThemeProvider theme={settings.themes[settings.activeTheme]}>\r\n                <Drawer\r\n                    width={'100px'}\r\n                    container={container}\r\n                    variant=\"temporary\"\r\n                    anchor={'right'}\r\n                    open={panelOpen}\r\n                    onClose={handleDrawerToggle}\r\n                    ModalProps={{\r\n                        keepMounted: true,\r\n                    }}\r\n                >\r\n                    <Box sx={{ width: sideNavWidth }}>\r\n                        <Notification>\r\n                            <Icon color=\"primary\">notifications</Icon>\r\n                            <h5>Notifications</h5>\r\n                        </Notification>\r\n\r\n                        {notifications?.map((notification) => (\r\n                            <NotificationCard key={notification.id}>\r\n                                <DeleteButton\r\n                                    size=\"small\"\r\n                                    className=\"deleteButton\"\r\n                                    onClick={() =>\r\n                                        deleteNotification(notification.id)\r\n                                    }\r\n                                >\r\n                                    <Icon className=\"icon\">clear</Icon>\r\n                                </DeleteButton>\r\n                                <Link\r\n                                    to={`/${notification.path}`}\r\n                                    onClick={handleDrawerToggle}\r\n                                    style={{ textDecoration: 'none' }}\r\n                                >\r\n                                    <Card sx={{ mx: 2, mb: 3 }} elevation={3}>\r\n                                        <CardLeftContent>\r\n                                            <Box display=\"flex\">\r\n                                                <Icon\r\n                                                    className=\"icon\"\r\n                                                    color={\r\n                                                        notification.icon.color\r\n                                                    }\r\n                                                >\r\n                                                    {notification.icon.name}\r\n                                                </Icon>\r\n                                                <Heading>\r\n                                                    {notification.heading}\r\n                                                </Heading>\r\n                                            </Box>\r\n                                            <Small className=\"messageTime\">\r\n                                                {getTimeDifference(\r\n                                                    new Date(\r\n                                                        notification.timestamp\r\n                                                    )\r\n                                                )}\r\n                                                ago\r\n                                            </Small>\r\n                                        </CardLeftContent>\r\n                                        <Box sx={{ px: 2, pt: 1, pb: 2 }}>\r\n                                            <Paragraph sx={{ m: 0 }}>\r\n                                                {notification.title}\r\n                                            </Paragraph>\r\n                                            <Small sx={{ color: secondary }}>\r\n                                                {notification.subtitle}\r\n                                            </Small>\r\n                                        </Box>\r\n                                    </Card>\r\n                                </Link>\r\n                            </NotificationCard>\r\n                        ))}\r\n                        {!!notifications?.length && (\r\n                            <Box sx={{ color: secondary }}>\r\n                                <Button onClick={clearNotifications}>\r\n                                    Clear Notifications\r\n                                </Button>\r\n                            </Box>\r\n                        )}\r\n                    </Box>\r\n                </Drawer>\r\n            </ThemeProvider>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default NotificationBar\r\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport useAuth from 'app/hooks/useAuth'\nimport useSettings from 'app/hooks/useSettings'\nimport { styled, useTheme, Box } from '@mui/system'\nimport { Span } from '../../../components/Typography'\nimport { MatxMenu, MatxSearchBox } from 'app/components'\nimport ShoppingCart from '../../ShoppingCart/ShoppingCart'\nimport NotificationBar from '../../NotificationBar/NotificationBar'\nimport { themeShadows } from 'app/components/MatxTheme/themeColors'\nimport { NotificationProvider } from 'app/contexts/NotificationContext'\nimport {\n    Icon,\n    IconButton,\n    MenuItem,\n    Avatar,\n    useMediaQuery,\n    Hidden,\n} from '@mui/material'\nimport { topBarHeight } from 'app/utils/constant'\n\nconst StyledIconButton = styled(IconButton)(({ theme }) => ({\n    color: theme.palette.text.primary,\n}))\n\nconst TopbarRoot = styled('div')(({ theme }) => ({\n    top: 0,\n    zIndex: 96,\n    transition: 'all 0.3s ease',\n    boxShadow: themeShadows[8],\n    height: topBarHeight,\n}))\n\nconst TopbarContainer = styled(Box)(({ theme }) => ({\n    padding: '8px',\n    paddingLeft: 18,\n    paddingRight: 20,\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    background: theme.palette.primary.main,\n    [theme.breakpoints.down('sm')]: {\n        paddingLeft: 16,\n        paddingRight: 16,\n    },\n    [theme.breakpoints.down('xs')]: {\n        paddingLeft: 14,\n        paddingRight: 16,\n    },\n}))\n\nconst UserMenu = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    borderRadius: 24,\n    padding: 4,\n    '& span': {\n        margin: '0 8px',\n    },\n}))\n\nconst StyledItem = styled(MenuItem)(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    minWidth: 185,\n    '& a': {\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        textDecoration: 'none',\n    },\n    '& span': {\n        marginRight: '10px',\n        color: theme.palette.text.primary,\n    },\n}))\n\nconst IconBox = styled('div')(({ theme }) => ({\n    display: 'inherit',\n    [theme.breakpoints.down('md')]: {\n        display: 'none !important',\n    },\n}))\n\nconst Layout1Topbar = () => {\n    const theme = useTheme()\n    const { settings, updateSettings } = useSettings()\n    const { logout, user } = useAuth()\n    const isMdScreen = useMediaQuery(theme.breakpoints.down('md'))\n\n    const updateSidebarMode = (sidebarSettings) => {\n        updateSettings({\n            layout1Settings: {\n                leftSidebar: {\n                    ...sidebarSettings,\n                },\n            },\n        })\n    }\n\n    const handleSidebarToggle = () => {\n        let { layout1Settings } = settings\n        let mode\n        if (isMdScreen) {\n            mode =\n                layout1Settings.leftSidebar.mode === 'close'\n                    ? 'mobile'\n                    : 'close'\n        } else {\n            mode =\n                layout1Settings.leftSidebar.mode === 'full' ? 'close' : 'full'\n        }\n        updateSidebarMode({ mode })\n    }\n\n    return (\n        <TopbarRoot>\n            <TopbarContainer>\n                <Box display=\"flex\">\n                    <StyledIconButton onClick={handleSidebarToggle}>\n                        <Icon>menu</Icon>\n                    </StyledIconButton>\n\n                    {/* <IconBox>\n                        <StyledIconButton>\n                            <Icon>mail_outline</Icon>\n                        </StyledIconButton>\n\n                        <StyledIconButton>\n                            <Icon>web_asset</Icon>\n                        </StyledIconButton>\n\n                        <StyledIconButton>\n                            <Icon>star_outline</Icon>\n                        </StyledIconButton>\n                    </IconBox> */}\n                </Box>\n                <Box display=\"flex\" alignItems=\"center\">\n                    {/* <MatxSearchBox /> */}\n                    <NotificationProvider>\n                        <NotificationBar />\n                    </NotificationProvider>\n\n                    {/* <ShoppingCart /> */}\n\n                    <MatxMenu\n                        menuButton={\n                            <UserMenu>\n                                <Hidden xsDown>\n                                    <Span>\n                                        Hi <strong>{user.name}</strong>\n                                    </Span>\n                                </Hidden>\n                                <Avatar\n                                    src={user.avatar}\n                                    sx={{ cursor: 'pointer' }}\n                                />\n                            </UserMenu>\n                        }\n                    >\n                        {/* <StyledItem>\n                            <Link to=\"/\">\n                                <Icon> home </Icon>\n                                <Span> Home </Span>\n                            </Link>\n                        </StyledItem>\n                        <StyledItem>\n                            <Link to=\"/page-layouts/user-profile\">\n                                <Icon> person </Icon>\n                                <Span> Profile </Span>\n                            </Link>\n                        </StyledItem>\n                        <StyledItem>\n                            <Icon> settings </Icon>\n                            <Span> Settings </Span>\n                        </StyledItem> */}\n                        <StyledItem onClick={logout}>\n                            <Icon> power_settings_new </Icon>\n                            <Span> Logout </Span>\n                        </StyledItem>\n                    </MatxMenu>\n                </Box>\n            </TopbarContainer>\n        </TopbarRoot>\n    )\n}\n\nexport default React.memo(Layout1Topbar)\n","import React from 'react'\nimport { MatxLogo } from 'app/components'\nimport { Span } from '../../components/Typography'\nimport { styled, Box } from '@mui/system'\nimport useSettings from 'app/hooks/useSettings'\n\nconst BrandRoot = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: '0px',\n}))\n\nconst StyledSpan = styled(Span)(({ theme, mode }) => ({\n    fontSize: 18,\n    marginLeft: '.5rem',\n    display: mode === 'compact' ? 'none' : 'block',\n}))\n\nconst IMG = styled('img')(() => ({\n    width: '100%',\n    display: 'block'\n}))\n\nconst Brand = ({ children }) => {\n    const { settings } = useSettings()\n    const leftSidebar = settings.layout1Settings.leftSidebar\n    const { mode } = leftSidebar\n\n    return (\n        <BrandRoot>\n            <Box display=\"flex\" alignItems=\"center\">\n                {/* <MatxLogo /> */}\n                {/* <IMG\n                   src=\"./assets/images/logos/pcap_big2.svg\"\n                   alt=\"\"\n                /> */}\n                <IMG\n                   src=\"./assets/images/sq-15.jpg\"\n                   alt=\"\"\n                />\n                <StyledSpan mode={mode} className=\"sidenavHoverShow\">\n                </StyledSpan>\n            </Box>\n            <Box\n                className=\"sidenavHoverShow\"\n                sx={{ display: mode === 'compact' ? 'none' : 'block' }}\n            >\n                {children || null}\n            </Box>\n        </BrandRoot>\n    )\n}\n\nexport default Brand\n","import React, { Fragment } from 'react'\nimport Scrollbar from 'react-perfect-scrollbar'\nimport { navigations } from 'app/navigations'\nimport { MatxVerticalNav } from 'app/components'\nimport useSettings from 'app/hooks/useSettings'\nimport { styled } from '@mui/system'\n\nconst StyledScrollBar = styled(Scrollbar)(() => ({\n    paddingLeft: '1rem',\n    paddingRight: '1rem',\n    position: 'relative',\n}))\n\nconst SideNavMobile = styled('div')(({ theme }) => ({\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    width: '100vw',\n    background: 'rgba(0, 0, 0, 0.54)',\n    zIndex: -1,\n    [theme.breakpoints.up('lg')]: {\n        display: 'none',\n    },\n}))\n\nconst Sidenav = ({ children }) => {\n    const { settings, updateSettings } = useSettings()\n\n    const updateSidebarMode = (sidebarSettings) => {\n        let activeLayoutSettingsName = settings.activeLayout + 'Settings'\n        let activeLayoutSettings = settings[activeLayoutSettingsName]\n\n        updateSettings({\n            ...settings,\n            [activeLayoutSettingsName]: {\n                ...activeLayoutSettings,\n                leftSidebar: {\n                    ...activeLayoutSettings.leftSidebar,\n                    ...sidebarSettings,\n                },\n            },\n        })\n    }\n\n    return (\n        <Fragment>\n            <StyledScrollBar options={{ suppressScrollX: true }}>\n                {children}\n                <MatxVerticalNav items={navigations} />\n            </StyledScrollBar>\n\n            <SideNavMobile\n                onClick={() => updateSidebarMode({ mode: 'close' })}\n            />\n        </Fragment>\n    )\n}\n\nexport default Sidenav\n","import React from 'react'\r\nimport Brand from '../../Brand/Brand'\r\nimport { convertHexToRGB } from 'app/utils/utils'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport Sidenav from '../../Sidenav/Sidenav'\r\nimport useSettings from 'app/hooks/useSettings'\r\nimport { Switch, Hidden } from '@mui/material'\r\nimport { themeShadows } from 'app/components/MatxTheme/themeColors'\r\nimport { sidenavCompactWidth, sideNavWidth } from 'app/utils/constant'\r\n\r\nconst SidebarNavRoot = styled(Box)(({ theme, width, primaryBg, bgImgURL }) => ({\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    height: '100vh',\r\n    width: width,\r\n    boxShadow: themeShadows[8],\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'top',\r\n    backgroundSize: 'cover',\r\n    zIndex: 111,\r\n    overflow: 'hidden',\r\n    color: theme.palette.text.primary,\r\n    transition: 'all 250ms ease-in-out',\r\n    backgroundImage: `linear-gradient(to bottom, rgba(${primaryBg}, 0.96), rgba(${primaryBg}, 0.96)), url(${bgImgURL})`,\r\n    '&:hover': {\r\n        width: sideNavWidth,\r\n        '& .sidenavHoverShow': {\r\n            display: 'block',\r\n        },\r\n        '& .compactNavItem': {\r\n            width: '100%',\r\n            maxWidth: '100%',\r\n            '& .nav-bullet': {\r\n                display: 'block',\r\n            },\r\n            '& .nav-bullet-text': {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }\r\n}))\r\n\r\nconst NavListBox = styled(Box)(() => ({\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n}))\r\n\r\nconst Layout1Sidenav = () => {\r\n    const theme = useTheme()\r\n    const { settings, updateSettings } = useSettings()\r\n    const leftSidebar = settings.layout1Settings.leftSidebar\r\n    const { mode, bgImgURL } = leftSidebar\r\n\r\n    const getSidenavWidth = () => {\r\n        switch (mode) {\r\n            case 'compact':\r\n                return sidenavCompactWidth\r\n            default:\r\n                return sideNavWidth\r\n        }\r\n    }\r\n    const primaryRGB = convertHexToRGB(theme.palette.primary.main)\r\n\r\n    const updateSidebarMode = (sidebarSettings) => {\r\n        updateSettings({\r\n            layout1Settings: {\r\n                leftSidebar: {\r\n                    ...sidebarSettings,\r\n                },\r\n            },\r\n        })\r\n    }\r\n\r\n    const handleSidenavToggle = () => {\r\n        updateSidebarMode({ mode: mode === 'compact' ? 'full' : 'compact' })\r\n    }\r\n\r\n    return (\r\n        <SidebarNavRoot\r\n            bgImgURL={bgImgURL}\r\n            primaryBg={primaryRGB}\r\n            width={getSidenavWidth()}\r\n        >\r\n            <NavListBox>\r\n                <Brand>\r\n                    {/* <Hidden smDown>\r\n                        <Switch\r\n                            onChange={handleSidenavToggle}\r\n                            checked={leftSidebar.mode !== 'full'}\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                        />\r\n                    </Hidden> */}\r\n                </Brand>\r\n                <Sidenav />\r\n            </NavListBox>\r\n        </SidebarNavRoot>\r\n    )\r\n}\r\n\r\nexport default React.memo(Layout1Sidenav)\r\n","import React from 'react'\nimport useSettings from 'app/hooks/useSettings'\nimport { ThemeProvider, useTheme } from '@mui/material'\n\nconst SidenavTheme = ({ children }) => {\n    const theme = useTheme()\n    const { settings } = useSettings()\n    const sidenavTheme =\n        settings.themes[settings.layout1Settings.leftSidebar.theme] || theme\n\n    return <ThemeProvider theme={sidenavTheme}>{children}</ThemeProvider>\n}\n\nexport default SidenavTheme\n","import { Badge } from '@mui/material'\nimport { styled } from '@mui/system'\n\nconst BadgeSelected = styled(Badge)(() => ({\n    top: '0',\n    right: '0',\n    height: '32px',\n    width: '32px',\n    borderRadius: '50%',\n}))\n\nexport default BadgeSelected\n","import clsx from 'clsx'\nimport React from 'react'\nimport { styled, useTheme } from '@mui/system'\nimport useSettings from 'app/hooks/useSettings'\nimport { Fab, IconButton, Icon } from '@mui/material'\n\nconst Toggle = styled('div')(() => ({\n    position: 'fixed',\n    right: '30px',\n    bottom: '50px',\n    zIndex: 99,\n    transition: 'all 0.15s ease',\n    '&.open': {\n        right: '10px',\n    },\n}))\n\nconst SecondarySidebarToggle = () => {\n    const { settings, updateSettings } = useSettings()\n\n    const toggle = () => {\n        updateSettings({\n            secondarySidebar: { open: !settings.secondarySidebar.open },\n        })\n    }\n\n    // useEffect(() => {\n    //   updateSettings({\n    //     secondarySidebar: { open: !isMobile },\n    //   });\n    // }, [isMobile]);\n\n    const { palette } = useTheme()\n    const textColor = palette.primary.contrastText\n\n    return (\n        <Toggle className={clsx({ open: settings.secondarySidebar.open })}>\n            {settings.secondarySidebar.open && (\n                <IconButton onClick={toggle} size=\"small\" aria-label=\"toggle\">\n                    <Icon sx={{ color: textColor }}>close</Icon>\n                </IconButton>\n            )}\n            {!settings.secondarySidebar.open && (\n                <Fab color=\"primary\" aria-label=\"expand\" onClick={toggle}>\n                    <Icon sx={{ color: textColor }}>settings</Icon>\n                </Fab>\n            )}\n        </Toggle>\n    )\n}\n\nexport default SecondarySidebarToggle\n","import Footer from '../../Footer/Footer'\nimport Layout1Topbar from './Layout1Topbar'\nimport { MatxSuspense } from 'app/components'\nimport Layout1Sidenav from './Layout1Sidenav'\nimport Scrollbar from 'react-perfect-scrollbar'\nimport useSettings from 'app/hooks/useSettings'\nimport { styled, Box, useTheme } from '@mui/system'\nimport React, { useEffect, useRef } from 'react'\nimport { ThemeProvider, useMediaQuery } from '@mui/material'\nimport SidenavTheme from '../../MatxTheme/SidenavTheme/SidenavTheme'\nimport SecondarySidebar from '../../SecondarySidebar/SecondarySidebar'\nimport { sidenavCompactWidth, sideNavWidth } from 'app/utils/constant'\nimport { Outlet } from 'react-router-dom'\n\nconst Layout1Root = styled(Box)(({ theme }) => ({\n    display: 'flex',\n    background: theme.palette.background.default,\n}))\n\nconst ContentBox = styled(Box)(() => ({\n    height: '100%',\n    display: 'flex',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n}))\n\nconst StyledScrollBar = styled(Scrollbar)(() => ({\n    height: '100%',\n    position: 'relative',\n    display: 'flex',\n    flexGrow: '1',\n    flexDirection: 'column',\n}))\n\nconst LayoutContainer = styled(Box)(({ width, secondarySidebar }) => ({\n    height: '100vh',\n    display: 'flex',\n    flexGrow: '1',\n    flexDirection: 'column',\n    verticalAlign: 'top',\n    marginLeft: width,\n    position: 'relative',\n    overflow: 'hidden',\n    transition: 'all 0.3s ease',\n    marginRight: secondarySidebar.open ? 50 : 0,\n}))\n\nconst Layout1 = () => {\n    const { settings, updateSettings } = useSettings()\n    const { layout1Settings, secondarySidebar } = settings\n    const topbarTheme = settings.themes[layout1Settings.topbar.theme]\n    const {\n        leftSidebar: { mode: sidenavMode, show: showSidenav },\n    } = layout1Settings\n\n    const getSidenavWidth = () => {\n        switch (sidenavMode) {\n            case 'full':\n                return sideNavWidth\n            case 'compact':\n                return sidenavCompactWidth\n            default:\n                return '0px'\n        }\n    }\n\n    const sidenavWidth = getSidenavWidth()\n    const theme = useTheme()\n    const isMdScreen = useMediaQuery(theme.breakpoints.down('md'))\n\n    const ref = useRef({ isMdScreen, settings })\n    const layoutClasses = `theme-${theme.palette.type}`\n\n    useEffect(() => {\n        let { settings } = ref.current\n        let sidebarMode = settings.layout1Settings.leftSidebar.mode\n        if (settings.layout1Settings.leftSidebar.show) {\n            let mode = isMdScreen ? 'close' : sidebarMode\n            updateSettings({ layout1Settings: { leftSidebar: { mode } } })\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isMdScreen])\n\n    return (\n        <Layout1Root className={layoutClasses}>\n            {showSidenav && sidenavMode !== 'close' && (\n                <SidenavTheme>\n                    <Layout1Sidenav />\n                </SidenavTheme>\n            )}\n\n            <LayoutContainer\n                width={sidenavWidth}\n                secondarySidebar={secondarySidebar}\n            >\n                {layout1Settings.topbar.show && layout1Settings.topbar.fixed && (\n                    // <Layout1Topbar fixed={true} />\n                    <ThemeProvider theme={topbarTheme}>\n                        <Layout1Topbar fixed={true} className=\"elevation-z8\" />\n                    </ThemeProvider>\n                )}\n                {settings.perfectScrollbar && (\n                    <StyledScrollBar>\n                        {layout1Settings.topbar.show &&\n                            !layout1Settings.topbar.fixed && (\n                                // <Layout1Topbar />\n                                <ThemeProvider theme={topbarTheme}>\n                                    <Layout1Topbar />\n                                </ThemeProvider>\n                            )}\n                        <Box flexGrow={1} position=\"relative\">\n                            <MatxSuspense>\n                                {/* {renderRoutes(routes)} */}\n                                <Outlet />\n                            </MatxSuspense>\n                        </Box>\n                        {settings.footer.show && !settings.footer.fixed && (\n                            <Footer />\n                        )}\n                    </StyledScrollBar>\n                )}\n\n                {!settings.perfectScrollbar && (\n                    <ContentBox>\n                        {layout1Settings.topbar.show &&\n                            !layout1Settings.topbar.fixed && (\n                                // <Layout1Topbar />\n                                <ThemeProvider theme={topbarTheme}>\n                                    <Layout1Topbar />\n                                </ThemeProvider>\n                            )}\n                        <Box flexGrow={1} position=\"relative\">\n                            <MatxSuspense>\n                                {}\n                                <Outlet />\n                            </MatxSuspense>\n                        </Box>\n                        {/* {settings.footer.show && !settings.footer.fixed && (\n                            <Footer />\n                        )} */}\n                    </ContentBox>\n                )}\n\n                {/* {settings.footer.show && settings.footer.fixed && <Footer />} */}\n            </LayoutContainer>\n            {/* {settings.secondarySidebar.show && <SecondarySidebar />} */}\n        </Layout1Root>\n    )\n}\n\nexport default React.memo(Layout1)\n","import { H5, Span } from '../Typography'\nimport BadgeSelected from './BadgeSelected'\nimport Scrollbar from 'react-perfect-scrollbar'\nimport useSettings from 'app/hooks/useSettings'\nimport React, { Fragment, useState } from 'react'\nimport { styled, Box, useTheme } from '@mui/system'\nimport { themeShadows } from '../MatxTheme/themeColors'\nimport {\n    Icon,\n    Card,\n    Link,\n    Button,\n    Drawer,\n    Tooltip,\n    IconButton,\n    ThemeProvider,\n} from '@mui/material'\n\nconst Label = styled(Span)(({ theme }) => ({\n    color: theme.palette.secondary.main,\n    backgroundColor: theme.palette.primary.dark,\n    fontWeight: 700,\n    transform: 'rotate(90deg)',\n    marginBottom: '2.5rem',\n    padding: '.25rem .5rem',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    letterSpacing: '1.5px',\n    fontSize: '1rem',\n    '&:hover, &.open': {\n        backgroundColor: theme.palette.secondary.main,\n        color: theme.palette.secondary.contrastText,\n    },\n}))\n\nconst MaxCustomaizer = styled('div')(({ theme }) => ({\n    height: '100vh',\n    width: 320,\n    position: 'fixed',\n    top: 0,\n    right: 0,\n    zIndex: 50,\n    display: 'flex',\n    flexDirection: 'column',\n    paddingBottom: '32px',\n    boxShadow: themeShadows[12],\n    background: theme.palette.background.default,\n    '& .helpText': {\n        margin: '0px .5rem 1rem',\n    },\n}))\n\nconst LayoutBox = styled(BadgeSelected)(() => ({\n    width: '100%',\n    height: '152px !important',\n    cursor: 'pointer',\n    marginTop: '12px',\n    marginBottom: '12px',\n    '& .layout-name': {\n        display: 'none',\n    },\n    '&:hover .layout-name': {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        background: 'rgba(0,0,0,0.3)',\n        zIndex: 12,\n    },\n}))\n\nconst Controller = styled('div')(() => ({\n    minHeight: 58,\n    padding: '14px 20px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: '16px',\n    boxShadow: themeShadows[6],\n}))\n\nconst IMG = styled('img')(() => ({\n    width: '100%',\n}))\n\nconst StyledScrollBar = styled(Scrollbar)(() => ({\n    paddingLeft: '16px',\n    paddingRight: '16px',\n}))\n\nconst MatxCustomizer = () => {\n    const [open, setOpen] = useState(false)\n    const [tabIndex, setTabIndex] = useState(0)\n    const { settings, updateSettings } = useSettings()\n    const theme = useTheme()\n    const secondary = theme.palette.text.secondary\n\n    const tooglePanel = () => {\n        setOpen(!open)\n    }\n    const handleTabChange = (index) => {\n        setTabIndex(index)\n    }\n    let activeTheme = { ...settings.themes[settings.activeTheme] }\n\n    return (\n        <Fragment>\n            <Tooltip title=\"Theme Settings\" placement=\"left\">\n                <Label className=\"open\" onClick={tooglePanel}>\n                    DEMOS\n                </Label>\n            </Tooltip>\n\n            <ThemeProvider theme={activeTheme}>\n                <Drawer\n                    anchor={'right'}\n                    open={open}\n                    variant=\"temporary\"\n                    onClose={tooglePanel}\n                    ModalProps={{\n                        keepMounted: true,\n                    }}\n                >\n                    <MaxCustomaizer>\n                        <Controller>\n                            <Box display=\"flex\">\n                                <Icon className=\"icon\" color=\"primary\">\n                                    settings\n                                </Icon>\n                                <H5 sx={{ ml: 1, fontSize: '1rem' }}>\n                                    Theme Settings\n                                </H5>\n                            </Box>\n                            <IconButton onClick={tooglePanel}>\n                                <Icon className=\"icon\">close</Icon>\n                            </IconButton>\n                        </Controller>\n                        <Box px={3} mb={2} display=\"flex\">\n                            <Button\n                                variant=\"outlined\"\n                                color={tabIndex === 0 ? 'secondary' : 'primary'}\n                                onClick={() => handleTabChange(0)}\n                                sx={{ mr: 2 }}\n                            >\n                                Demos\n                            </Button>\n                            <Button\n                                variant=\"outlined\"\n                                color={tabIndex === 1 ? 'secondary' : 'primary'}\n                                onClick={() => handleTabChange(1)}\n                            >\n                                Settings\n                            </Button>\n                        </Box>\n\n                        <StyledScrollBar options={{ suppressScrollX: true }}>\n                            {tabIndex === 0 && (\n                                <Box sx={{ mb: 4, mx: 3 }}>\n                                    <Box sx={{ color: secondary }}>Layouts</Box>\n\n                                    <Box display=\"flex\" flexDirection=\"column\">\n                                        {demoLayouts.map((layout) => (\n                                            <LayoutBox\n                                                color=\"secondary\"\n                                                badgeContent={'Pro'}\n                                                invisible={!layout.isPro}\n                                                key={layout.name}\n                                            >\n                                                <Card\n                                                    sx={{\n                                                        position: 'relative',\n                                                    }}\n                                                    onClick={() =>\n                                                        updateSettings(\n                                                            layout.options\n                                                        )\n                                                    }\n                                                    elevation={4}\n                                                >\n                                                    <Box\n                                                        sx={{\n                                                            overflow: 'hidden',\n                                                        }}\n                                                        className=\"layout-name\"\n                                                    >\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"secondary\"\n                                                        >\n                                                            {layout.name}\n                                                        </Button>\n                                                    </Box>\n\n                                                    <IMG\n                                                        src={layout.thumbnail}\n                                                        alt={layout.name}\n                                                    />\n                                                </Card>\n                                            </LayoutBox>\n                                        ))}\n                                    </Box>\n                                </Box>\n                            )}\n\n                            {/* END LAYOUT */}\n                            {tabIndex === 1 && (\n                                <div>\n                                    <div className=\"helpText\">\n                                        We used React context API to control\n                                        layout. Check out the{' '}\n                                        <Link\n                                            href=\"http://demos.ui-lib.com/matx-react-doc/layout.html\"\n                                            target=\"_blank\"\n                                        >\n                                            Documentation\n                                        </Link>\n                                    </div>\n                                </div>\n                            )}\n                        </StyledScrollBar>\n                    </MaxCustomaizer>\n                </Drawer>\n            </ThemeProvider>\n        </Fragment>\n    )\n}\n\nconst demoLayouts = [\n    {\n        name: 'Light Sidebar',\n        thumbnail: '/assets/images/screenshots/layout1-customizer.png',\n        isPro: false,\n        options: {\n            activeLayout: 'layout1',\n            activeTheme: 'blue',\n            layout1Settings: {\n                leftSidebar: {\n                    mode: 'full',\n                    theme: 'whiteBlue',\n                    bgOpacity: 0.98,\n                },\n                topbar: {\n                    theme: 'blueDark',\n                    fixed: true,\n                },\n            },\n            footer: {\n                theme: 'slateDark1',\n            },\n        },\n    },\n    {\n        name: 'Compact Sidebar',\n        thumbnail: '/assets/images/screenshots/layout5-customizer.png',\n        isPro: false,\n        options: {\n            activeLayout: 'layout1',\n            activeTheme: 'blue',\n            layout1Settings: {\n                leftSidebar: {\n                    mode: 'compact',\n                    theme: 'slateDark1',\n                    bgOpacity: 0.92,\n                },\n                topbar: {\n                    theme: 'whiteBlue',\n                    fixed: true,\n                },\n            },\n        },\n    },\n    {\n        name: 'Dark Sidebar',\n        thumbnail: '/assets/images/screenshots/layout1-blue-customizer.png',\n        isPro: false,\n        options: {\n            activeLayout: 'layout1',\n            activeTheme: 'blue',\n            layout1Settings: {\n                leftSidebar: {\n                    mode: 'full',\n                    theme: 'slateDark1',\n                    bgOpacity: 0.92,\n                },\n                topbar: {\n                    theme: 'blueDark',\n                    fixed: true,\n                },\n            },\n        },\n    },\n]\n\nexport default MatxCustomizer\n","import React from 'react'\nimport { styled, useTheme } from '@mui/system'\nimport { Chatbox } from 'app/components'\nimport { ChatHead } from 'app/components'\nimport { Span } from '../Typography'\nimport { IconButton, Icon } from '@mui/material'\nimport ShoppingCart from '../ShoppingCart/ShoppingCart'\nimport MatxCustomizer from '../MatxCustomizer/MatxCustomizer'\n\nconst SidebarRoot = styled('div')(({ theme, width }) => ({\n    position: 'fixed',\n    height: '100vh',\n    width: width,\n    right: 0,\n    bottom: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    boxShadow: theme.shadows[8],\n    backgroundColor: theme.palette.primary.main,\n    zIndex: 98,\n    transition: 'all 0.15s ease',\n    color: theme.palette.text.primary,\n    '@global': {\n        '@media screen and (min-width: 767px)': {\n            '.content-wrap, .layout2.layout-contained, .layout2.layout-full': {\n                marginRight: (props) => props.width,\n            },\n            '.matx-customizer': {\n                right: (props) => props.width,\n            },\n        },\n        '@media screen and (max-width: 959px)': {\n            '.toolbar-menu-wrap .menu-area': {\n                width: (props) => `calc(100% - ${props.width})`,\n            },\n        },\n    },\n}))\n\nconst SecondarySidebarContent = () => {\n    const { palette } = useTheme()\n    const textColor = palette.primary.contrastText\n    return (\n        <SidebarRoot width={'50px'} className=\"secondary-sidebar\">\n            <Span sx={{ m: 'auto' }}></Span>\n            <MatxCustomizer />\n            <ShoppingCart />\n\n            <ChatHead\n                icon={\n                    <IconButton\n                        sx={{ my: '12px', color: textColor }}\n                        size=\"small\"\n                    >\n                        <Icon>comments</Icon>\n                    </IconButton>\n                }\n            >\n                <Chatbox />\n            </ChatHead>\n            <Span sx={{ m: 'auto' }}></Span>\n        </SidebarRoot>\n    )\n}\n\nexport default SecondarySidebarContent\n"],"sourceRoot":""}